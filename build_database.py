import osimport jsonfrom pathlib import Pathimport face_recognition as frimport spotipyfrom spotipy.oauth2 import SpotifyOAuthdef buildDatabase(cid, secret, redURI = 'https://www.google.com', scopes = 'streaming, user-read-playback-state, user-modify-playback-state', dirName = './known_people', encFile = 'encodings.json'):    '''    Summary    -------        Parameters    ----------    cid : TYPE        DESCRIPTION.    secret : TYPE        DESCRIPTION.    redURI : TYPE, optional        DESCRIPTION. The default is 'https://www.google.com'.    scopes : TYPE, optional        DESCRIPTION. The default is 'streaming, user-read-playback-state, user-modify-playback-state'.    dirName : TYPE, optional        DESCRIPTION. The default is './known_people'.    encodingsFile : TYPE, optional        DESCRIPTION. The default is 'encodings.txt'.    Returns    -------    None.    '''    #TODO give user option to change their favorite song - might make a new function called update_database        if not os.path.isdir(dirName):        os.mkdir(dirName)        with open('.gitignore', 'a+') as gi:            gi.write(f'\n{dirName}')        if not os.path.isfile(encFile):        with open(encFile, 'w'):            pass        with open('.gitignore', 'a+') as gi:            gi.write(f'\n{encFile}')                      with open(encFile, 'r') as enc:        try:            identityMap = json.loads(enc.read())        except:            identityMap = {}            sp = spotipy.Spotify(auth_manager = SpotifyOAuth(client_id = cid, client_secret = secret, redirect_uri = redURI, scope = scopes))    #TODO clean this block of code up    for filename in os.listdir(dirName):        if filename.endswith('.jpg'):            name = Path(f'./{filename}').stem            if name not in identityMap:                image = fr.load_image_file(os.path.join(dirName, filename))                faceEnc = fr.face_encodings(image)[0]                while True:                    try:                        track = input(f"Enter {name}'s favorite song: ")                        artist = input(f"Enter artist of {name}'s favorite song: ")                        searchQuery = f'{track} {artist}'                        searchResults = sp.search(q=searchQuery, limit = 1)                        trackURI = searchResults['tracks']['items'][0]['uri']                        identityMap[name] = [faceEnc.tolist(), trackURI]                        break                    except:                        print('Not a valid Song/Artist Combo. Please try again.')                                            with open('encodings.json', 'w') as encodings:        json.dump(identityMap, encodings, indent = 2)        def updateFavoriteSong():    passkeyFile = 'keys.txt'if not os.path.isfile(keyFile):    with open(keyFile, 'w') as kf:        pass    with open('.gitignore', 'a+') as gi:        gi.write(f'\n{keyFile}')else:            with open(keyFile, 'r') as keys:        cid, secret = keys.read().split('\n')            buildDatabase(cid, secret)        