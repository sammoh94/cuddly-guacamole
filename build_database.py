import osimport jsonfrom pathlib import Pathimport face_recognition as frimport spotipyfrom spotipy.oauth2 import SpotifyOAuthdef build_database(cid, secret, redURI = 'https://www.google.com', scopes = 'streaming, user-read-playback-state, user-modify-playback-state', dirName = './known_people', encodingsFile = 'encodings.txt'):    '''    Summary    -------        Parameters    ----------    cid : TYPE        DESCRIPTION.    secret : TYPE        DESCRIPTION.    redURI : TYPE, optional        DESCRIPTION. The default is 'https://www.google.com'.    scopes : TYPE, optional        DESCRIPTION. The default is 'streaming, user-read-playback-state, user-modify-playback-state'.    dirName : TYPE, optional        DESCRIPTION. The default is './known_people'.    encodingsFile : TYPE, optional        DESCRIPTION. The default is 'encodings.txt'.    Returns    -------    None.    '''    #TODO give user option to change their favorite song (will likely be some input function)        sp = spotipy.Spotify(auth_manager = SpotifyOAuth(client_id = cid, client_secret = secret, redirect_uri = redURI, scope = scopes))        with open('encodings.json', 'r') as encodings:        try:            identityMap = json.loads(encodings.read())        except:            identityMap = {}            for filename in os.listdir(dirName):        if filename.endswith(".jpg"):            name = Path(f"./{filename}").stem            if name not in identityMap:                image = fr.load_image_file(os.path.join(dirName, filename))                faceEnc = fr.face_encodings(image)[0]                #TODO goal here will be to allow the user to try again without having to rerun script                try:                    track = input(f"Enter {name}'s favorite song: ")                    artist = input(f"Enter artist of {name}'s favorite song: ")                    searchQuery = f"{track} {artist}"                    searchResults = sp.search(q=searchQuery, limit = 1)                    trackURI = searchResults['tracks']['items'][0]['uri']                    identityMap[name] = [faceEnc.tolist(), trackURI]                except:                    print('Not a valid Song/Artist Combo')                    continue                    with open('encodings.json', 'w') as encodings:        json.dump(identityMap, encodings, indent = 2)                                