import osfrom pathlib import Pathimport face_recognition as frimport helperfrom consts import spotify_object as sp, cid, secretdef create_files(dir_name = 'known_people/', enc_file = 'encodings.json', key_file = 'keys.txt'):    '''        Parameters    ----------    dir_name : TYPE, optional        DESCRIPTION. The default is 'known_people/'.    enc_file : TYPE, optional        DESCRIPTION. The default is 'encodings.json'.    key_file : TYPE, optional        DESCRIPTION. The default is 'keys.txt'.    Returns    -------    None.    '''    if not os.path.isdir(dir_name):        os.mkdir(dir_name)        with open('.gitignore', 'a+') as gi:            gi.write(f'\n{dir_name}')        if not os.path.isfile(enc_file):        with open(enc_file, 'w'), open('.gitignore', 'a+') as gi:            gi.write(f'\n{enc_file}')                   if not os.path.isdir(key_file):        with open(key_file, 'w') as kf, open('.gitignore', 'a+') as gi:            gi.write(f'\n{key_file}')               cid = input('Paste in client id from Spotify developer application: ')            secret = input('Paste in secret id from Spotify developer application: ')            kf.write(f'{cid}\n{secret}')                        def build_database(spotify_object = sp, dir_name = './known_people', enc_file = 'encodings.json'):    '''    Summary    -------    Checks if the proper files and directories are present in the main project    directory and creates them if they are not. Maps a person's name to facial    encodings found in a provided image (from the known_people directory) using    the face_recognition API and to Spotify track URIs from the user's input.    Dumps this mapping to a JSON file.    Parameters    ----------    spotify_object : Spotify Object        Imported constant that allows access to Spotify information and music        playback functionality.    dir_name : string, optional        Directory name. This is the directory in which you will store photographs        to train the facial recognition model. All files in this directory should        be of the form '[FIRST NAME] [LAST NAME].jpg'. The default is './known_people'.    enc_file : string, optional        Encodings file. This is a json file that maps a person's name to their        facial features and favorite song. The default is 'encodings.json'.    Returns    -------    None.    '''    identity_map = helper.open_encoding_file_read(file_name = 'encodings.json')        for filename in os.listdir(dir_name):        if filename.endswith('.jpg'):            name = Path(f'./{filename}').stem            if name not in identity_map.keys():                image = fr.load_image_file(os.path.join(dir_name, filename))                faceEnc = fr.face_encodings(image)[0]                while True:                    try:                        track_URI = add_track(name)                        identity_map[name] = [faceEnc.tolist(), track_URI]                        break                    except:                        print('Not a valid Song/Artist Combo. Please try again.')                                            helper.open_encoding_file_write(identity_map)        def add_track(name, spotify_object = sp):    '''    Summary    -------    helper function that finds the Spotify track corresponding to the user's    input        Parameters    ----------    name : string        the name of the person whose favorite song is being input (should be         of the form 'firstName lastName')    spotify_object : Spotify Object        Imported constant that allows access to Spotify information and music        playback functionality.    Returns    -------    string        a string of the URI representing a Spotify track    '''    track = input(f"Enter {name}'s favorite song: ")    artist = input(f"Enter artist of {name}'s favorite song: ")    searchQuery = f'{track} {artist}'    searchResults = spotify_object.search(q=searchQuery, limit = 1)    return searchResults['tracks']['items'][0]['uri']def update_favorite_track(names, spotify_object = sp, enc_file = 'encodings.json'):    '''    Summary    -------    Takes in a list of names for which the user wishes to change the mapped    favorite song. Checks if name is valid, and if so allows the user to input    new song information. If not, prompts user to try again (until a correct    combination is entered). Dumps new mapping to a JSON file.    Parameters    ----------    names : list, required        List of names (strings) for which the user wishes to change favorite song    spotify_object : Spotify Object        Imported constant that allows access to Spotify information and music        playback functionality.    enc_file : string, optional        Encodings file. This is a json file that maps a person's name to their        facial features and favorite song. The default is 'encodings.json'.    Returns    -------    None.    '''    identity_map = helper.open_encoding_file_read()            for name in names:        if name.title() not in identity_map.keys():            print(f'\n{name} does not have data stored. Check spelling or update database.')            continue        while True:            try:                track_URI = add_track(name.title())                identity_map[name.title()][1] = track_URI                break            except:                print('Not a valid Song/Artist Combo. Please try again.')                    helper.open_encoding_file_write(identity_map)              def main():    build_database()if __name__ == '__main__':    main()                                                